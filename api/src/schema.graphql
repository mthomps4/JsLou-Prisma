type Query {
  # me: User!
  users(query: String): [User!]!
  speakers(query: String): [Speaker!]!
  events(query: String): [Event!]!
  projects(query: String): [Event!]!
}

type Mutation {
  createUser(data: CreateUserInput!): AuthPayload!
  deleteUser(id: ID!): User!
  updateUser(id: ID!, data: UpdateUserInput!): User!
}

type Subscription {
  event: EventSubscriptionPayload!
  project: ProjectSubscriptionPayload!
  speaker: SpeakerSubscriptionPayload!
  user: UserSubscriptionPayload!
}

type AuthPayload {
  user: User!
  token: String!
}

input CreateUserInput {
  name: String!
  email: String!
  password: String!
}

input UpdateUserInput {
  name: String
  email: String
}

type User {
  id: ID!
  name: String!
  email: String!
  password: String!
}

type Speaker {
  id: ID!
  name: String!
  email: String!
  bio: String!
  github: String
  twitter: String
  website: String
  extraLinks: [String]
  events: [Event]
}

type Event {
  id: ID!
  name: String!
  # datetime: DateTime!
  location: String!
  address: String!
  meetupUrl: String
  extraLinks: [String]
  organizer: User!
  project: Project
}

type Project {
  id: ID!
  name: String!
  description: String!
  repo: String!
  contacts: [String]
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
}

type SpeakerSubscriptionPayload {
  mutation: MutationType!
  node: Speaker
}

type EventSubscriptionPayload {
  mutation: MutationType!
  node: Event
}

type ProjectSubscriptionPayload {
  mutation: MutationType!
  node: Project
}
